# Шаг 1: Выбираем базовый образ.
# Мы начнем с официального, легковесного образа Python 3.9.
# '-slim' означает, что он содержит только самое необходимое, что делает наш итоговый образ меньше.
FROM python:3.11-slim

# Шаг 2: Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды будут выполняться в этой папке.
WORKDIR /app

# Шаг 3: Копируем файл с зависимостями и устанавливаем их.
# Копируем сначала только requirements.txt, чтобы Docker мог закэшировать этот слой.
# Если зависимости не меняются, Docker не будет переустанавливать их при каждой сборке.
# Устанавливаем системную библиотеку libgomp1, необходимую для LightGBM
# 'apt-get update' - обновляет список доступных пакетов
# 'apt-get install -y libgomp1' - устанавливает саму библиотеку
# '--no-install-recommends' - не устанавливать лишние пакеты для экономии места
# 'rm -rf /var/lib/apt/lists/*' - очищаем кэш после установки, чтобы образ был меньше
RUN apt-get update && apt-get install -y --no-install-recommends libgomp1 && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Шаг 4: Копируем все остальные файлы проекта в рабочую директорию.
# Точка '.' означает "скопировать все из текущей папки в /app внутри контейнера".
COPY . .

# Шаг 5: Сообщаем Docker, что наше приложение слушает порт 8000.
# Это чисто информационная инструкция.
EXPOSE 8000

# Шаг 6: Задаем команду, которая будет выполняться при запуске контейнера.
# Мы запускаем uvicorn, указывая ему слушать все сетевые интерфейсы ('0.0.0.0').
# Это КРИТИЧЕСКИ ВАЖНО, чтобы можно было подключиться к контейнеру снаружи.
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]